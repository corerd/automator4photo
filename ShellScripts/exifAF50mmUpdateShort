#!/bin/bash

###############################################################################
# NAME
#        exifAF50mmUpdateShort - Write lens make meta informations in files
#
# SYNTAX
#        exifAF50mmUpdateShort FILE...
#
# DESCRIPTION
#        Use exiftool to add lens informations to comply with exif viewers
#        such as Flickr (Nikon D40 camera doesn't provide these informations).
#        FILE is one or more image file names.
#
# REQUIRED
#        exiftool by Phil Harvey
#        See: http://www.sno.phy.queensu.ca/~phil/exiftool/
#
# DIAGNOSTICS
#        This application exits with a status of 0 on success, or 1 if
#        an error occurred processing one or more image files.
#
# ----------------------------------------------------------------------------
# THE BEER-WARE LICENSE
# <corerd@live.com> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.
# ----------------------------------------------------------------------------
###############################################################################

LENS_MODEL="AF Nikkor 50mm f/1.8"
LENS_APERTURE_DEFAULT="1.8"

# exiftool application
# Absolute path name is required by MacOS Automator
# because it hasn't /usr/local/bin in PATH
EXIFTOOL="/usr/local/bin/exiftool"

# Uncomment the following line to enable debug
#DEBUG=

print_help() {
	echo "Usage: exifAF50mmUpdate [-FNumber=VALUE] FILE..."
}

## Write lens meta informations
# argument1: image file
set_tagLens() {
   # exif-tag setting for old unchipped lenses
   # See: http://u88.n24.queensu.ca/exiftool/forum/index.php?topic=7167.0
   # WARNING: Using Exif:MaxApertureValue tag
   #          leads to unpredictable Composite:LensID value
   echo "Update $2"
   $EXIFTOOL -P -overwrite_original \
      -Exif:LensInfo="50mm f/1.8" \
      -Exif:LensMake="Nikon" \
      -Exif:LensModel="$LENS_MODEL" \
      "$1"
}


################
# MAIN PROGRAM #
################

# check the number of arguments
if [[ $# -lt 1 ]]; then
	print_help
	exit 1
fi

# Check if exiftool exists and is executable
if [[ ! -x "$EXIFTOOL" ]]; then
   echo "exiftool is not installed!"
   echo "Check in http://www.sno.phy.queensu.ca/~phil/exiftool/"
   exit 1
fi

# process the images
process_status=0
echo "Set $LENS_MODEL exif tags with -FNumber=$aperture"
for image_file in "$@"
do
   if [[ ! -z "${DEBUG+x}" ]]; then
      if [[ -f "$image_file"_original ]]; then
         echo "Restore $image_file from original"
         cp -p "$image_file"_original "$image_file"
      fi
   fi
   
   set_tagLens "$image_file" 2>&1
   exiftool_status=$?

   # exiftool puts to stderr both warning and error messages.
   # The exit status is 0 on success or warning, 1 on error.
   if [[ $exiftool_status -ne 0 ]]; then
      process_status=1
   fi
   
   #if [[ ! -z "${DEBUG+x}" ]]; then
   if [[ "$DEBUG" -eq 2 ]]; then
      # See: http://stackoverflow.com/a/13864829 to check if a variable is set 
      if [[ ! -f "$image_file"_original-exif.txt ]]; then
         exiftool -a -G1 -s "$image_file"_original > "$image_file"_original-exif.txt
      fi
      exiftool -a -G1 -s "$image_file" > "$image_file"-exif.txt
      diff "$image_file"_original-exif.txt "$image_file"-exif.txt
   fi
done

exit $process_status
