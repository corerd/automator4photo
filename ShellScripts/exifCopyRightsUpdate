#!/bin/bash

###############################################################################
# NAME
#        exifCopyRightsUpdate - Write copyrights informations in files
#
# SYNTAX
#        exifCopyRightsUpdate -Photographer=STRING [-Description=STRING] FILE...
#
# DESCRIPTION
#        Use exiftool to add copyrights informations.
#        FILE is one or more image file names.
#
# OPTIONS
#        -Photographer=STRING   The name of the person who created the image
#        -Description=STRING    The caption (optional)
#
# REQUIRED
#        exiftool by Phil Harvey
#        See: http://www.sno.phy.queensu.ca/~phil/exiftool/
#
# DIAGNOSTICS
#        This application exits with a status of 0 on success, or 1 if
#        an error occurred processing one or more image files.
#
# ----------------------------------------------------------------------------
# THE BEER-WARE LICENSE
# <corerd@live.com> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.
# ----------------------------------------------------------------------------
###############################################################################

PHOTOGRAPHER="Corrado Ubezio"
#PHOTOGRAPHER="Isabella"
AGENCY="Corrado Ubezio"
AGENCY_EMAIL="corerd@live.com"

# exiftool application
# Absolute path name is required by MacOS Automator
# because it hasn't /usr/local/bin in PATH
EXIFTOOL="/usr/local/bin/exiftool"

# Uncomment the following line to enable debug
#DEBUG=

print_help() {
	echo "Usage: exifCopyRightsUpdate -Photographer=STRING [-Description=STRING] FILE..."
}

## Get the date year from the image file
# argument1: image file
#
# Return:
#   -DateTimeOriginal year
#   If -DateTimeOriginal is not available then return -FileModifyDate year
#   If -FileModifyDate is not available then return current year
get_imgDateYear() {
   local dateTime
   dateTime="$($EXIFTOOL -DateTimeOriginal $1)"
   if [[ -z "$dateTime" ]]; then
      dateTime="$($EXIFTOOL -FileModifyDate $1)"
   fi
   if [[ -z "$dateTime" ]]; then
      dateTime="Current Date/Time : $(date +%Y:%m:%d" "%H:%M:%S)"
   fi
   #echo $dateTime
   
   # dateTime string format:
   #   <dateTime> ::= <description> : YYYY:mm:dd HH:MM:SS
   #   <description> ::= "Date/Time Original" | "File Modification Date/Time" | "Date/Time Original"
   dateTime="${dateTime#*:}"   # Remove through first ':'
   dateTime="${dateTime%%:*}"  # Remove from next ':' to end of string
   dateTime="${dateTime// /}"  # Remove blanks
   echo "$dateTime"
}

## Write Copyright related stuff
# argument1: image file
# @TODO add photographer argument
# @TODO add -description as optional argument
set_tagCopyright() {
   # @todo get copyright year from the year of the photo
   local imgYear="$(get_imgDateYear $1)"

   $EXIFTOOL -P -overwrite_original \
      -Creator="$PHOTOGRAPHER" \
      -CreatorCountry="Italy" \
      -CreatorWorkEmail="$AGENCY_EMAIL" \
      -Credit="$PHOTOGRAPHER" \
      -Source="$AGENCY" \
      -Copyright="(CC) BY-NC $imgYear $PHOTOGRAPHER, some rights reserved" \
      -UsageTerms="This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License" \
      -Instructions="You are free to share the material under the following terms: you must give the author attribution; you may not use the material for commercial purposes." \
      "$1"
}


################
# MAIN PROGRAM #
################

# check the number of arguments
if [[ $# -ne 1 ]]; then
	print_help
	exit 1
fi

set_tagCopyright $1 2>&1

exit 0


# Check if aperture tag is set.
# First, compare argv[1] with the tag name
# See http://stackoverflow.com/a/16263820 to compare strings
#
# If argv[1] matches the tag name, assign the value
# See http://stackoverflow.com/a/428118 to extract substring
if [[ $1 == "-FNumber="* ]]; then
	aperture=$(echo $1 | cut -d'=' -f 2)
   shift
else
   aperture=$LENS_APERTURE_DEFAULT
fi
# Ensures that the decimal separator is dot character
aperture=${aperture//,/.}

# check the number of remaining arguments
if [[ $# -lt 1 ]]; then
	print_help
	exit 1
fi

# Check if exiftool exists and is executable
if [[ ! -x "$EXIFTOOL" ]]; then
   echo "exiftool is not installed!"
   echo "Check in http://www.sno.phy.queensu.ca/~phil/exiftool/"
   exit 1
fi

# process the images
process_status=0
echo "Set $LENS_MODEL exif tags with -FNumber=$aperture"
for image_file in "$@"
do
   if [[ ! -z "${DEBUG+x}" ]]; then
      if [[ -f "$image_file"_original ]]; then
         echo "Restore $image_file from original"
         cp -p "$image_file"_original "$image_file"
      fi
   fi
   
   set_tagLens "$aperture" "$image_file" 2>&1
   exiftool_status=$?

   # exiftool puts to stderr both warning and error messages.
   # The exit status is 0 on success or warning, 1 on error.
   if [[ $exiftool_status -ne 0 ]]; then
      process_status=1
   fi
   
   #if [[ ! -z "${DEBUG+x}" ]]; then
   if [[ "$DEBUG" -eq 2 ]]; then
      # See: http://stackoverflow.com/a/13864829 to check if a variable is set 
      if [[ ! -f "$image_file"_original-exif.txt ]]; then
         exiftool -a -G1 -s "$image_file"_original > "$image_file"_original-exif.txt
      fi
      exiftool -a -G1 -s "$image_file" > "$image_file"-exif.txt
      diff "$image_file"_original-exif.txt "$image_file"-exif.txt
   fi
done

exit $process_status
