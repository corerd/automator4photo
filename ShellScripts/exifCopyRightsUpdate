#!/bin/bash

###############################################################################
# NAME
#        exifCopyRightsUpdate - Write copyrights information in files
#
# SYNTAX
#        exifCopyRightsUpdate -Photographer=STRING [-Description=STRING] FILE...
#
# DESCRIPTION
#        Use exiftool to add copyrights information.
#        FILE is one or more image file names.
#
# OPTIONS
#        -Photographer=STRING   The name of the person who created the image
#        -Description=STRING    The caption (optional)
#
# REQUIRED
#        exiftool by Phil Harvey
#        See: http://www.sno.phy.queensu.ca/~phil/exiftool/
#
# DIAGNOSTICS
#        This application exits with a status of 0 on success, or 1 if
#        an error occurred processing one or more image files.
#
# ----------------------------------------------------------------------------
# THE BEER-WARE LICENSE
# <corerd@live.com> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.
# ----------------------------------------------------------------------------
###############################################################################

AGENCY="Corrado Ubezio"
AGENCY_EMAIL="corerd@live.com"

# Set exiftool command and check if exists
# See: https://stackoverflow.com/a/677212
EXIFTOOL="exiftool"
if ! hash "$EXIFTOOL" 2>/dev/null; then
   # Check if exiftool absolute path exists and is executable.
   # The absolute command path is required by MacOS Automator
   # because it hasn't /usr/local/bin in PATH
   EXIFTOOL="/usr/local/bin/exiftool"
   if [[ ! -x "$EXIFTOOL" ]]; then
      echo "exiftool is not installed!"
      echo "Check in http://www.sno.phy.queensu.ca/~phil/exiftool/"
      exit 1
   fi
fi

# Uncomment the following line to enable debug
#DEBUG=

print_help() {
	echo "Usage: exifCopyRightsUpdate -Photographer=STRING [-Description=STRING] FILE..."
}

## Get the date year from the image file
# argument1: image file
#
# Return:
#   -DateTimeOriginal year
#   If -DateTimeOriginal is not available then return -FileModifyDate year
#   If -FileModifyDate is not available then return current year
get_imgDateYear() {
   local dateTime
   dateTime="$($EXIFTOOL -DateTimeOriginal $1)"
   if [[ -z "$dateTime" ]]; then
      dateTime="$($EXIFTOOL -FileModifyDate $1)"
   fi
   if [[ -z "$dateTime" ]]; then
      dateTime="Current Date/Time : $(date +%Y:%m:%d" "%H:%M:%S)"
   fi
   #echo $dateTime

   # dateTime string format:
   #   <dateTime> ::= <description> : YYYY:mm:dd HH:MM:SS
   #   <description> ::= "Date/Time Original" | "File Modification Date/Time" | "Date/Time Original"
   dateTime="${dateTime#*:}"   # Remove through first ':'
   dateTime="${dateTime%%:*}"  # Remove from next ':' to end of string
   dateTime="${dateTime// /}"  # Remove blanks
   echo "$dateTime"
}

## Write Copyright related stuff
# argument1: photographer
# argument2: description
# argument3: image file
set_tagCopyright() {
   # Get copyright year from the year of the image
   local imgYear="$(get_imgDateYear $3)"

   $EXIFTOOL -P -overwrite_original \
      -Creator="$1" \
      -CreatorCountry="Italy" \
      -CreatorWorkEmail="$AGENCY_EMAIL" \
      -Credit="$1" \
      -Source="$AGENCY" \
      -Copyright="(CC) BY-NC $imgYear $1, some rights reserved" \
      -UsageTerms="This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License" \
      -Instructions="You are free to share the material under the following terms: you must give the author attribution; you may not use the material for commercial purposes." \
      -Description="$2" \
      "$3"
}


################
# MAIN PROGRAM #
################

# check the number of arguments
if [[ $# -lt 2 ]]; then
   # At least -Photographer argument and one FILE are required
	print_help
	exit 1
fi

# Require -Photographer argument is set
if [[ "$1" != "-Photographer="* ]]; then
	print_help
	exit 1
fi
photographer=$(echo $1 | cut -d'=' -f 2)
shift

# Check if -Description argument is set.
if [[ "$1" == "-Description="* ]]; then
	description=$(echo $1 | cut -d'=' -f 2)
   shift
else
   description=""
fi

# check the number of remaining arguments
if [[ $# -lt 1 ]]; then
	print_help
	exit 1
fi

# process the images
process_status=0
echo "Set Copyrights for >$photographer< description:>$description<"

for image_file in "$@"
do
   set_tagCopyright "$photographer" "$description" "$image_file" 2>&1
   exiftool_status=$?

   # exiftool puts to stderr both warning and error messages.
   # The exit status is 0 on success or warning, 1 on error.
   if [[ $exiftool_status -ne 0 ]]; then
      process_status=1
   fi

   if [[ ! -z "${DEBUG+x}" ]]; then
      exiftool -a -G1 -s "$image_file"
   fi
done

exit $process_status
